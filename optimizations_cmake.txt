# CMake-Konfiguration für QuicSand Optimierungen
# Diese Datei enthält die notwendigen Konfigurationen für alle Optimierungen

# Minimale CMake-Version
cmake_minimum_required(VERSION 3.10)

# Projektname und Sprache
project(QuicSandOptimizations VERSION 1.0 LANGUAGES CXX)

# C++17 Standard aktivieren
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# ARM-spezifische Kompilierungsflags für Apple Silicon
if(APPLE AND CMAKE_SYSTEM_PROCESSOR MATCHES "arm64")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mcpu=apple-m1")
    add_definitions(-DARM_OPTIMIZATIONS_ENABLED=1)
    message(STATUS "Apple Silicon (M1/M2) spezifische Optimierungen aktiviert")
endif()

# Notwendige Pakete finden
find_package(Threads REQUIRED)
find_package(OpenSSL REQUIRED)

# Optionale SIMD-Features
option(ENABLE_SIMD "SIMD-Optimierungen aktivieren" ON)
if(ENABLE_SIMD)
    if(APPLE AND CMAKE_SYSTEM_PROCESSOR MATCHES "arm64")
        # NEON für ARM
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv8-a+simd")
        add_definitions(-DSIMD_NEON_ENABLED=1)
        message(STATUS "SIMD NEON-Optimierungen für ARM aktiviert")
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
        # AVX2 für x86_64
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx2")
        add_definitions(-DSIMD_AVX2_ENABLED=1)
        message(STATUS "SIMD AVX2-Optimierungen für x86_64 aktiviert")
    endif()
endif()

# QuicSand Optimierungen Bibliothek
add_library(quicsand_optimizations STATIC
    core/cache_optimizations.hpp
    core/thread_optimizations.hpp
    core/energy_optimizations.hpp
    core/optimizations_integration.hpp
    core/zero_copy_optimized.hpp
)

# Include-Pfade
target_include_directories(quicsand_optimizations PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${OPENSSL_INCLUDE_DIR}
)

# Bibliotheks-Abhängigkeiten
target_link_libraries(quicsand_optimizations PUBLIC
    Threads::Threads
    ${OPENSSL_LIBRARIES}
)

# Testausführbare Datei für Optimierungen
add_executable(optimizations_test
    tests/optimizations_test.cpp
)

# Link Optimierungen zu Tests
target_link_libraries(optimizations_test
    quicsand_optimizations
)

# Zero-Copy-Integration Tests
add_executable(zero_copy_integration_test
    tests/zero_copy_integration_test.cpp
)

# Link Zero-Copy zu Tests
target_link_libraries(zero_copy_integration_test
    quicsand_optimizations
)

# Integrationsbeispiel
add_executable(integrated_example
    examples/integrated_example.cpp
)

# Link Beispiel
target_link_libraries(integrated_example
    quicsand_optimizations
)

# Vereinfachter Test
add_executable(simplified_test
    tests/simplified_test.cpp
)

# Link zu vereinfachtem Test
target_link_libraries(simplified_test
    Threads::Threads
)

# Installation
install(TARGETS quicsand_optimizations
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
)

install(FILES
    core/cache_optimizations.hpp
    core/thread_optimizations.hpp
    core/energy_optimizations.hpp
    core/optimizations_integration.hpp
    core/zero_copy_optimized.hpp
    DESTINATION include/quicsand/core
)

# Hinweis zur Integration mit bestehendem QuicSand CMake
message(STATUS "Um diese Optimierungen in das Haupt-QuicSand-Projekt zu integrieren, füge 'add_subdirectory(path/to/optimizations)' zur Haupt-CMakeLists.txt hinzu.")
