--- a/quiche/include/quiche.h	2025-07-07 12:46:13.644989117 +0000
+++ b/quiche/include/quiche.h	2025-07-07 13:01:26.370117644 +0000
@@ -179,6 +179,8 @@
 
 // Enables sending or receiving early data.
 void quiche_config_enable_early_data(quiche_config *config);
+// Enables specialized SIMD optimizations for high performance.
+void quiche_config_enable_simd(quiche_config *config);
 
 // Configures the list of supported application protocols.
 int quiche_config_set_application_protos(quiche_config *config,
--- a/quiche/src/ffi.rs	2025-07-07 12:46:13.644989117 +0000
+++ b/quiche/src/ffi.rs	2025-07-07 13:01:34.230070708 +0000
@@ -226,6 +226,11 @@
 }
 
 #[no_mangle]
+pub extern "C" fn quiche_config_enable_simd(config: &mut Config) {
+    config.enable_simd();
+}
+
+#[no_mangle]
 /// Corresponds to the `Config::set_application_protos_wire_format` Rust
 /// function.
 pub extern "C" fn quiche_config_set_application_protos(
--- a/quiche/src/lib.rs	2025-07-07 12:46:13.648989117 +0000
+++ b/quiche/src/lib.rs	2025-07-07 13:02:37.841701098 +0000
@@ -836,6 +836,7 @@
     max_amplification_factor: usize,
 
     disable_dcid_reuse: bool,
+    simd: bool,
 
     track_unknown_transport_params: Option<usize>,
 }
@@ -909,6 +910,7 @@
             max_amplification_factor: MAX_AMPLIFICATION_FACTOR,
 
             disable_dcid_reuse: false,
+            simd: false,
 
             track_unknown_transport_params: None,
         })
@@ -1043,6 +1045,11 @@
         self.tls_ctx.set_early_data_enabled(true);
     }
 
+    /// Enables specialized SIMD optimizations.
+    pub fn enable_simd(&mut self) {
+        self.simd = true;
+    }
+
     /// Configures the list of supported application protocols.
     ///
     /// On the client this configures the list of protocols to send to the
