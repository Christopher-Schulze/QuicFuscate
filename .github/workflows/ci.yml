name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Verify submodules
        shell: bash
        run: |
          if [ ! -d libs/patched_quiche ]; then
            echo "libs/patched_quiche missing" >&2
            exit 1
          fi

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Fetch and build quiche
        shell: bash
        run: |
          ./scripts/quiche_workflow.sh --step fetch

      - name: Ensure QUICHE_PATH
        shell: bash
        run: |
          echo "QUICHE_PATH=${{ github.workspace }}/libs/patched_quiche/quiche" >> $GITHUB_ENV
          if [ ! -d "${{ github.workspace }}/libs/patched_quiche/quiche" ]; then
            echo "libs/patched_quiche/quiche missing" >&2
            exit 1
          fi

      - name: Run Clippy
        shell: bash
        run: |
          cargo clippy --workspace --all-targets -- -D warnings

      - name: Run cppcheck
        shell: bash
        run: |
          if ! command -v cppcheck >/dev/null; then
            if [[ "${{ runner.os }}" == "Linux" ]]; then
              sudo apt-get update && sudo apt-get install -y cppcheck
            elif [[ "${{ runner.os }}" == "macOS" ]]; then
              brew install cppcheck
            elif [[ "${{ runner.os }}" == "Windows" ]]; then
              choco install cppcheck -y
            fi
          fi
          cppcheck --error-exitcode=1 -q cli

      - name: Build
        shell: bash
        run: |
          cargo build --workspace --release

      - name: Run tests
        shell: bash
        run: |
          cargo test --workspace --all-targets

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-binaries
          path: |
            target/release/quicfuscate*
            target/release/*.dll
            target/release/*.dylib
            target/release/*.so

